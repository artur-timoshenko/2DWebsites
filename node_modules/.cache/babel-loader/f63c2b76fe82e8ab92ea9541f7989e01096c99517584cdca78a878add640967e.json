{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect';\nfunction useElementSize() {\n  const [ref, setRef] = useState(null);\n  const [size, setSize] = useState({\n    width: 0,\n    height: 0\n  });\n  const handleSize = useCallback(() => {\n    setSize({\n      width: ref?.offsetWidth || 0,\n      height: ref?.offsetHeight || 0\n    });\n  }, [ref?.offsetHeight, ref?.offsetWidth]);\n  useEventListener('resize', handleSize);\n  useIsomorphicLayoutEffect(() => {\n    handleSize();\n  }, [ref?.offsetHeight, ref?.offsetWidth]);\n  return [setRef, size];\n}\nexport default useElementSize;","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtD,SAASC,yBAAyB,QAAQ,8BAA8B;AAOxE,SAASC,cAAcA;EAOrB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGL,QAAQ,CAAW,IAAI,CAAC;EAC9C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAO;IACrCQ,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;GACT,CAAC;EAGF,MAAMC,UAAU,GAAGX,WAAW,CAAC,MAAK;IAClCQ,OAAO,CAAC;MACNC,KAAK,EAAEJ,GAAG,EAAEO,WAAW,IAAI,CAAC;MAC5BF,MAAM,EAAEL,GAAG,EAAEQ,YAAY,IAAI;KAC9B,CAAC;EAGJ,CAAC,EAAE,CAACR,GAAG,EAAEQ,YAAY,EAAER,GAAG,EAAEO,WAAW,CAAC,CAAC;EAEzCV,gBAAgB,CAAC,QAAQ,EAAES,UAAU,CAAC;EAEtCR,yBAAyB,CAAC,MAAK;IAC7BQ,UAAU,EAAE;EAEd,CAAC,EAAE,CAACN,GAAG,EAAEQ,YAAY,EAAER,GAAG,EAAEO,WAAW,CAAC,CAAC;EAEzC,OAAO,CAACN,MAAM,EAAEC,IAAI,CAAC;AACvB;AAEA,eAAeH,cAAc","names":["useCallback","useState","useEventListener","useIsomorphicLayoutEffect","useElementSize","ref","setRef","size","setSize","width","height","handleSize","offsetWidth","offsetHeight"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useElementSize\\useElementSize.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\ninterface Size {\n  width: number\n  height: number\n}\n\nfunction useElementSize<T extends HTMLElement = HTMLDivElement>(): [\n  (node: T | null) => void,\n  Size,\n] {\n  // Mutable values like 'ref.current' aren't valid dependencies\n  // because mutating them doesn't re-render the component.\n  // Instead, we use a state as a ref to be reactive.\n  const [ref, setRef] = useState<T | null>(null)\n  const [size, setSize] = useState<Size>({\n    width: 0,\n    height: 0,\n  })\n\n  // Prevent too many rendering using useCallback\n  const handleSize = useCallback(() => {\n    setSize({\n      width: ref?.offsetWidth || 0,\n      height: ref?.offsetHeight || 0,\n    })\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref?.offsetHeight, ref?.offsetWidth])\n\n  useEventListener('resize', handleSize)\n\n  useIsomorphicLayoutEffect(() => {\n    handleSize()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref?.offsetHeight, ref?.offsetWidth])\n\n  return [setRef, size]\n}\n\nexport default useElementSize\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}