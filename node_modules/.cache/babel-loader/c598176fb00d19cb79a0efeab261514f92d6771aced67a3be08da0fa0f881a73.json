{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect';\nfunction useEventListener(eventName, handler, element) {\n  const savedHandler = useRef(handler);\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    const targetElement = element?.current || window;\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    }\n    const eventListener = event => savedHandler.current(event);\n    targetElement.addEventListener(eventName, eventListener);\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\nexport default useEventListener;","map":{"version":3,"mappings":"AAAA,SAAoBA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAGpD,SAASC,yBAAyB,QAAQ,8BAA8B;AAexE,SAASC,gBAAgBA,CAKvBC,SAAkB,EAClBC,OAES,EACTC,OAAsB;EAGtB,MAAMC,YAAY,GAAGN,MAAM,CAACI,OAAO,CAAC;EAEpCH,yBAAyB,CAAC,MAAK;IAC7BK,YAAY,CAACC,OAAO,GAAGH,OAAO;EAChC,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEbL,SAAS,CAAC,MAAK;IAEb,MAAMS,aAAa,GAAeH,OAAO,EAAEE,OAAO,IAAIE,MAAM;IAC5D,IAAI,EAAED,aAAa,IAAIA,aAAa,CAACE,gBAAgB,CAAC,EAAE;MACtD;;IAIF,MAAMC,aAAa,GAAmBC,KAAK,IAAIN,YAAY,CAACC,OAAO,CAACK,KAAK,CAAC;IAE1EJ,aAAa,CAACE,gBAAgB,CAACP,SAAS,EAAEQ,aAAa,CAAC;IAGxD,OAAO,MAAK;MACVH,aAAa,CAACK,mBAAmB,CAACV,SAAS,EAAEQ,aAAa,CAAC;IAC7D,CAAC;EACH,CAAC,EAAE,CAACR,SAAS,EAAEE,OAAO,CAAC,CAAC;AAC1B;AAEA,eAAeH,gBAAgB","names":["useEffect","useRef","useIsomorphicLayoutEffect","useEventListener","eventName","handler","element","savedHandler","current","targetElement","window","addEventListener","eventListener","event","removeEventListener"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useEventListener\\useEventListener.ts"],"sourcesContent":["import { RefObject, useEffect, useRef } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\nfunction useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n): void\nfunction useEventListener<\n  K extends keyof HTMLElementEventMap,\n  T extends HTMLElement = HTMLDivElement,\n>(\n  eventName: K,\n  handler: (event: HTMLElementEventMap[K]) => void,\n  element: RefObject<T>,\n): void\n\nfunction useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap,\n  T extends HTMLElement | void = void,\n>(\n  eventName: KW | KH,\n  handler: (\n    event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event,\n  ) => void,\n  element?: RefObject<T>,\n) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(handler)\n\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    // Define the listening target\n    const targetElement: T | Window = element?.current || window\n    if (!(targetElement && targetElement.addEventListener)) {\n      return\n    }\n\n    // Create event listener that calls handler function stored in ref\n    const eventListener: typeof handler = event => savedHandler.current(event)\n\n    targetElement.addEventListener(eventName, eventListener)\n\n    // Remove event listener on cleanup\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener)\n    }\n  }, [eventName, element])\n}\n\nexport default useEventListener\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}