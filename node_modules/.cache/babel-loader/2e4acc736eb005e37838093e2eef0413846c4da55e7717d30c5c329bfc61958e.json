{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\nfunction useLocalStorage(key, initialValue) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? parseJSON(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  const setValueRef = useRef();\n  setValueRef.current = value => {\n    if (typeof window == 'undefined') {\n      console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);\n    }\n    try {\n      const newValue = value instanceof Function ? value(storedValue) : value;\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n      setStoredValue(newValue);\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  };\n  const setValue = useCallback(value => setValueRef.current?.(value), []);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue());\n  }, [readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return [storedValue, setValue];\n}\nexport default useLocalStorage;\nfunction parseJSON(value) {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value ?? '');\n  } catch {\n    console.log('parsing error on', {\n      value\n    });\n    return undefined;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAGEA,WAAW,EACXC,SAAS,EACTC,MAAM,EACNC,QAAQ,QACH,OAAO;AAGd,SAASC,gBAAgB,QAAQ,qBAAqB;AAUtD,SAASC,eAAeA,CAAIC,GAAW,EAAEC,YAAe;EAGtD,MAAMC,SAAS,GAAGR,WAAW,CAAC,MAAQ;IAEpC,IAAI,OAAOS,MAAM,KAAK,WAAW,EAAE;MACjC,OAAOF,YAAY;;IAGrB,IAAI;MACF,MAAMG,IAAI,GAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC;MAC7C,OAAOI,IAAI,GAAIG,SAAS,CAACH,IAAI,CAAO,GAAGH,YAAY;KACpD,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCV,GAAG,IAAI,EAAEQ,KAAK,CAAC;MAC/D,OAAOP,YAAY;;EAEvB,CAAC,EAAE,CAACA,YAAY,EAAED,GAAG,CAAC,CAAC;EAIvB,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAIK,SAAS,CAAC;EAE5D,MAAMW,WAAW,GAAGjB,MAAM,EAAe;EAEzCiB,WAAW,CAACC,OAAO,GAAGC,KAAK,IAAG;IAE5B,IAAI,OAAOZ,MAAM,IAAI,WAAW,EAAE;MAChCM,OAAO,CAACC,IAAI,CACV,mCAAmCV,GAAG,2CAA2C,CAClF;;IAGH,IAAI;MAEF,MAAMgB,QAAQ,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACJ,WAAW,CAAC,GAAGI,KAAK;MAGvEZ,MAAM,CAACE,YAAY,CAACa,OAAO,CAAClB,GAAG,EAAEmB,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;MAG1DJ,cAAc,CAACI,QAAQ,CAAC;MAGxBb,MAAM,CAACkB,aAAa,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;KACjD,CAAC,OAAOd,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCV,GAAG,IAAI,EAAEQ,KAAK,CAAC;;EAEnE,CAAC;EAID,MAAMe,QAAQ,GAAgB7B,WAAW,CACvCqB,KAAK,IAAIF,WAAW,CAACC,OAAO,GAAGC,KAAK,CAAC,EACrC,EAAE,CACH;EAEDpB,SAAS,CAAC,MAAK;IACbiB,cAAc,CAACV,SAAS,EAAE,CAAC;EAE7B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsB,mBAAmB,GAAG9B,WAAW,CAAC,MAAK;IAC3CkB,cAAc,CAACV,SAAS,EAAE,CAAC;EAC7B,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAGfJ,gBAAgB,CAAC,SAAS,EAAE0B,mBAAmB,CAAC;EAIhD1B,gBAAgB,CAAC,eAAe,EAAE0B,mBAAmB,CAAC;EAEtD,OAAO,CAACb,WAAW,EAAEY,QAAQ,CAAC;AAChC;AAEA,eAAexB,eAAe;AAG9B,SAASQ,SAASA,CAAIQ,KAAoB;EACxC,IAAI;IACF,OAAOA,KAAK,KAAK,WAAW,GAAGU,SAAS,GAAGN,IAAI,CAACO,KAAK,CAACX,KAAK,IAAI,EAAE,CAAC;GACnE,CAAC,MAAM;IACNN,OAAO,CAACkB,GAAG,CAAC,kBAAkB,EAAE;MAAEZ;IAAK,CAAE,CAAC;IAC1C,OAAOU,SAAS;;AAEpB","names":["useCallback","useEffect","useRef","useState","useEventListener","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","parseJSON","error","console","warn","storedValue","setStoredValue","setValueRef","current","value","newValue","Function","setItem","JSON","stringify","dispatchEvent","Event","setValue","handleStorageChange","undefined","parse","log"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useLocalStorage\\useLocalStorage.ts"],"sourcesContent":["import {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n\ndeclare global {\n  interface WindowEventMap {\n    'local-storage': CustomEvent\n  }\n}\n\ntype SetValue<T> = Dispatch<SetStateAction<T>>\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, SetValue<T>] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): T => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (parseJSON(item) as T) : initialValue\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return initialValue\n    }\n  }, [initialValue, key])\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue)\n\n  const setValueRef = useRef<SetValue<T>>()\n\n  setValueRef.current = value => {\n    // Prevent build error \"window is undefined\" but keeps working\n    if (typeof window == 'undefined') {\n      console.warn(\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\n      )\n    }\n\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(newValue))\n\n      // Save state\n      setStoredValue(newValue)\n\n      // We dispatch a custom event so every useLocalStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'))\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error)\n    }\n  }\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: SetValue<T> = useCallback(\n    value => setValueRef.current?.(value),\n    [],\n  )\n\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue())\n  }, [readValue])\n\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange)\n\n  // this is a custom event, triggered in writeValueToLocalStorage\n  // See: useLocalStorage()\n  useEventListener('local-storage', handleStorageChange)\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n\n// A wrapper for \"JSON.parse()\"\" to support \"undefined\" value\nfunction parseJSON<T>(value: string | null): T | undefined {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value ?? '')\n  } catch {\n    console.log('parsing error on', { value })\n    return undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}