{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useLocalStorage } from '../useLocalStorage';\nimport { useMediaQuery } from '../useMediaQuery';\nimport { useUpdateEffect } from '../useUpdateEffect';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useTernaryDarkMode() {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n  const [ternaryDarkMode, setTernaryDarkMode] = useLocalStorage('usehooks-ts-ternary-dark-mode', 'system');\n  const [isDarkMode, setDarkMode] = useState(isDarkOS);\n  useUpdateEffect(() => {\n    if (ternaryDarkMode === 'system') {\n      setDarkMode(isDarkOS);\n    }\n  }, [isDarkOS]);\n  useEffect(() => {\n    switch (ternaryDarkMode) {\n      case 'light':\n        setDarkMode(false);\n        break;\n      case 'system':\n        setDarkMode(isDarkOS);\n        break;\n      case 'dark':\n        setDarkMode(true);\n        break;\n    }\n  }, [ternaryDarkMode, isDarkOS]);\n  function toggleTernaryDarkMode() {\n    const toggleDict = {\n      light: 'system',\n      system: 'dark',\n      dark: 'light'\n    };\n    setTernaryDarkMode(prevMode => toggleDict[prevMode]);\n  }\n  return {\n    isDarkMode,\n    ternaryDarkMode,\n    setTernaryDarkMode,\n    toggleTernaryDarkMode\n  };\n}\nexport default useTernaryDarkMode;","map":{"version":3,"mappings":"AAAA,SAAmCA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGrE,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,MAAMC,kBAAkB,GAAG,8BAA8B;AAUzD,SAASC,kBAAkBA;EACzB,MAAMC,QAAQ,GAAGJ,aAAa,CAACE,kBAAkB,CAAC;EAClD,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GACzCP,eAAe,CAAkB,+BAA+B,EAAE,QAAQ,CAAC;EAC7E,MAAM,CAACQ,UAAU,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAUM,QAAQ,CAAC;EAG7DH,eAAe,CAAC,MAAK;IACnB,IAAII,eAAe,KAAK,QAAQ,EAAE;MAChCG,WAAW,CAACJ,QAAQ,CAAC;;EAEzB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdP,SAAS,CAAC,MAAK;IACb,QAAQQ,eAAe;MACrB,KAAK,OAAO;QACVG,WAAW,CAAC,KAAK,CAAC;QAClB;MACF,KAAK,QAAQ;QACXA,WAAW,CAACJ,QAAQ,CAAC;QACrB;MACF,KAAK,MAAM;QACTI,WAAW,CAAC,IAAI,CAAC;QACjB;;EAEN,CAAC,EAAE,CAACH,eAAe,EAAED,QAAQ,CAAC,CAAC;EAE/B,SAASK,qBAAqBA;IAC5B,MAAMC,UAAU,GAA6C;MAC3DC,KAAK,EAAE,QAAQ;MACfC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;KACP;IACDP,kBAAkB,CAACQ,QAAQ,IAAIJ,UAAU,CAACI,QAAQ,CAAC,CAAC;EACtD;EAEA,OAAO;IACLP,UAAU;IACVF,eAAe;IACfC,kBAAkB;IAClBG;GACD;AACH;AAEA,eAAeN,kBAAkB","names":["useEffect","useState","useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useTernaryDarkMode","isDarkOS","ternaryDarkMode","setTernaryDarkMode","isDarkMode","setDarkMode","toggleTernaryDarkMode","toggleDict","light","system","dark","prevMode"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useTernaryDarkMode\\useTernaryDarkMode.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-local-storage\nimport { useLocalStorage } from '../useLocalStorage'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useMediaQuery } from '../useMediaQuery'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useUpdateEffect } from '../useUpdateEffect'\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)'\n\ntype TernaryDarkMode = 'system' | 'dark' | 'light'\ninterface UseTernaryDarkModeOutput {\n  isDarkMode: boolean\n  ternaryDarkMode: TernaryDarkMode\n  setTernaryDarkMode: Dispatch<SetStateAction<TernaryDarkMode>>\n  toggleTernaryDarkMode: () => void\n}\n\nfunction useTernaryDarkMode(): UseTernaryDarkModeOutput {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY)\n  const [ternaryDarkMode, setTernaryDarkMode] =\n    useLocalStorage<TernaryDarkMode>('usehooks-ts-ternary-dark-mode', 'system')\n  const [isDarkMode, setDarkMode] = useState<boolean>(isDarkOS)\n\n  // Update darkMode if os prefers changes\n  useUpdateEffect(() => {\n    if (ternaryDarkMode === 'system') {\n      setDarkMode(isDarkOS)\n    }\n  }, [isDarkOS])\n\n  useEffect(() => {\n    switch (ternaryDarkMode) {\n      case 'light':\n        setDarkMode(false)\n        break\n      case 'system':\n        setDarkMode(isDarkOS)\n        break\n      case 'dark':\n        setDarkMode(true)\n        break\n    }\n  }, [ternaryDarkMode, isDarkOS])\n\n  function toggleTernaryDarkMode() {\n    const toggleDict: Record<TernaryDarkMode, TernaryDarkMode> = {\n      light: 'system',\n      system: 'dark',\n      dark: 'light',\n    }\n    setTernaryDarkMode(prevMode => toggleDict[prevMode])\n  }\n\n  return {\n    isDarkMode,\n    ternaryDarkMode,\n    setTernaryDarkMode,\n    toggleTernaryDarkMode,\n  }\n}\n\nexport default useTernaryDarkMode\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}