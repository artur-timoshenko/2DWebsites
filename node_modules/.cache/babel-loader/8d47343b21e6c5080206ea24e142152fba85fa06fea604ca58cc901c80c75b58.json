{"ast":null,"code":"import { useBoolean } from '../useBoolean';\nimport { useCounter } from '../useCounter';\nimport { useInterval } from '../useInterval';\nfunction useCountdown({\n  seconds,\n  interval,\n  isIncrement\n}) {\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter\n  } = useCounter(seconds);\n  const {\n    value: running,\n    setTrue: start,\n    setFalse: stop\n  } = useBoolean(false);\n  const reset = () => {\n    stop();\n    resetCounter();\n  };\n  useInterval(isIncrement ? increment : decrement, running ? interval : null);\n  return [count, {\n    start,\n    stop,\n    reset\n  }];\n}\nexport default useCountdown;","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,UAAU,QAAQ,eAAe;AAE1C,SAASC,WAAW,QAAQ,gBAAgB;AAoB5C,SAASC,YAAYA,CAAC;EACpBC,OAAO;EACPC,QAAQ;EACRC;AAAW,CACM;EACjB,MAAM;IACJC,KAAK;IACLC,SAAS;IACTC,SAAS;IACTC,KAAK,EAAEC;EAAY,CACpB,GAAGV,UAAU,CAACG,OAAO,CAAC;EAOvB,MAAM;IAAEQ,KAAK,EAAEC,OAAO;IAAEC,OAAO,EAAEC,KAAK;IAAEC,QAAQ,EAAEC;EAAI,CAAE,GAAGjB,UAAU,CAAC,KAAK,CAAC;EAK5E,MAAMU,KAAK,GAAGA,MAAK;IACjBO,IAAI,EAAE;IACNN,YAAY,EAAE;EAChB,CAAC;EAEDT,WAAW,CAACI,WAAW,GAAGE,SAAS,GAAGC,SAAS,EAAEI,OAAO,GAAGR,QAAQ,GAAG,IAAI,CAAC;EAC3E,OAAO,CAACE,KAAK,EAAE;IAAEQ,KAAK;IAAEE,IAAI;IAAEP;EAAK,CAAE,CAAC;AACxC;AAEA,eAAeP,YAAY","names":["useBoolean","useCounter","useInterval","useCountdown","seconds","interval","isIncrement","count","increment","decrement","reset","resetCounter","value","running","setTrue","start","setFalse","stop"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useCountdown\\useCountdown.ts"],"sourcesContent":["// See: https://usehooks-ts.com/react-hook/use-boolean\nimport { useBoolean } from '../useBoolean'\n// See: https://usehooks-ts.com/react-hook/use-counter\nimport { useCounter } from '../useCounter'\n// See: https://usehooks-ts.com/react-hook/use-interval\nimport { useInterval } from '../useInterval'\n\ninterface UseCountdownType {\n  seconds: number\n  interval: number\n  isIncrement?: boolean\n}\ninterface CountdownHelpers {\n  start: () => void\n  stop: () => void\n  reset: () => void\n}\n\n/**\n *\n * @param seconds the countdown's number, generally time seconds\n * @param interval the countdown's interval, milliseconds\n * @param isIncrement determine the countdown is increment, otherwise is decrement\n * @returns\n */\nfunction useCountdown({\n  seconds,\n  interval,\n  isIncrement,\n}: UseCountdownType): [number, CountdownHelpers] {\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter,\n  } = useCounter(seconds)\n  /**\n   * Note: used to control the useInterval\n   * running: If true, the interval is running\n   * start: Should set running true to trigger interval\n   * stop: Should set running false to remove interval\n   */\n  const { value: running, setTrue: start, setFalse: stop } = useBoolean(false)\n\n  /**\n   * Will set running false and reset the seconds to initial value\n   */\n  const reset = () => {\n    stop()\n    resetCounter()\n  }\n\n  useInterval(isIncrement ? increment : decrement, running ? interval : null)\n  return [count, { start, stop, reset }]\n}\n\nexport default useCountdown\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}