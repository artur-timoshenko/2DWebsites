{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\nfunction useReadLocalStorage(key) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return null;\n    }\n  }, [key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue());\n  }, [readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return storedValue;\n}\nexport default useReadLocalStorage;","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGxD,SAASC,gBAAgB,QAAQ,qBAAqB;AAItD,SAASC,mBAAmBA,CAAIC,GAAW;EAGzC,MAAMC,SAAS,GAAGN,WAAW,CAAC,MAAe;IAE3C,IAAI,OAAOO,MAAM,KAAK,WAAW,EAAE;MACjC,OAAO,IAAI;;IAGb,IAAI;MACF,MAAMC,IAAI,GAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC;MAC7C,OAAOG,IAAI,GAAIG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAO,GAAG,IAAI;KAC7C,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCV,GAAG,IAAI,EAAEQ,KAAK,CAAC;MAC/D,OAAO,IAAI;;EAEf,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAIT,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAWI,SAAS,CAAC;EAGnEL,SAAS,CAAC,MAAK;IACbgB,cAAc,CAACX,SAAS,EAAE,CAAC;EAE7B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,mBAAmB,GAAGlB,WAAW,CAAC,MAAK;IAC3CiB,cAAc,CAACX,SAAS,EAAE,CAAC;EAC7B,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAGfH,gBAAgB,CAAC,SAAS,EAAEe,mBAAmB,CAAC;EAIhDf,gBAAgB,CAAC,eAAe,EAAEe,mBAAmB,CAAC;EAEtD,OAAOF,WAAW;AACpB;AAEA,eAAeZ,mBAAmB","names":["useCallback","useEffect","useState","useEventListener","useReadLocalStorage","key","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","handleStorageChange"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useReadLocalStorage\\useReadLocalStorage.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n\ntype Value<T> = T | null\n\nfunction useReadLocalStorage<T>(key: string): Value<T> {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): Value<T> => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return null\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (JSON.parse(item) as T) : null\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return null\n    }\n  }, [key])\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<Value<T>>(readValue)\n\n  // Listen if localStorage changes\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue())\n  }, [readValue])\n\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange)\n\n  // this is a custom event, triggered in writeValueToLocalStorage\n  // See: useLocalStorage()\n  useEventListener('local-storage', handleStorageChange)\n\n  return storedValue\n}\n\nexport default useReadLocalStorage\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}