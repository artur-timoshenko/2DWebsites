{"ast":null,"code":"import { useEffect, useState } from 'react';\nfunction useIntersectionObserver(elementRef, {\n  threshold = 0,\n  root = null,\n  rootMargin = '0%',\n  freezeOnceVisible = false\n}) {\n  const [entry, setEntry] = useState();\n  const frozen = entry?.isIntersecting && freezeOnceVisible;\n  const updateEntry = ([entry]) => {\n    setEntry(entry);\n  };\n  useEffect(() => {\n    const node = elementRef?.current;\n    const hasIOSupport = !!window.IntersectionObserver;\n    if (!hasIOSupport || frozen || !node) return;\n    const observerParams = {\n      threshold,\n      root,\n      rootMargin\n    };\n    const observer = new IntersectionObserver(updateEntry, observerParams);\n    observer.observe(node);\n    return () => observer.disconnect();\n  }, [elementRef, JSON.stringify(threshold), root, rootMargin, frozen]);\n  return entry;\n}\nexport default useIntersectionObserver;","map":{"version":3,"mappings":"AAAA,SAAoBA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAMtD,SAASC,uBAAuBA,CAC9BC,UAA8B,EAC9B;EACEC,SAAS,GAAG,CAAC;EACbC,IAAI,GAAG,IAAI;EACXC,UAAU,GAAG,IAAI;EACjBC,iBAAiB,GAAG;AAAK,CACpB;EAEP,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,EAA6B;EAE/D,MAAMS,MAAM,GAAGF,KAAK,EAAEG,cAAc,IAAIJ,iBAAiB;EAEzD,MAAMK,WAAW,GAAGA,CAAC,CAACJ,KAAK,CAA8B,KAAU;IACjEC,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC;EAEDR,SAAS,CAAC,MAAK;IACb,MAAMa,IAAI,GAAGV,UAAU,EAAEW,OAAO;IAChC,MAAMC,YAAY,GAAG,CAAC,CAACC,MAAM,CAACC,oBAAoB;IAElD,IAAI,CAACF,YAAY,IAAIL,MAAM,IAAI,CAACG,IAAI,EAAE;IAEtC,MAAMK,cAAc,GAAG;MAAEd,SAAS;MAAEC,IAAI;MAAEC;IAAU,CAAE;IACtD,MAAMa,QAAQ,GAAG,IAAIF,oBAAoB,CAACL,WAAW,EAAEM,cAAc,CAAC;IAEtEC,QAAQ,CAACC,OAAO,CAACP,IAAI,CAAC;IAEtB,OAAO,MAAMM,QAAQ,CAACE,UAAU,EAAE;EAGpC,CAAC,EAAE,CAAClB,UAAU,EAAEmB,IAAI,CAACC,SAAS,CAACnB,SAAS,CAAC,EAAEC,IAAI,EAAEC,UAAU,EAAEI,MAAM,CAAC,CAAC;EAErE,OAAOF,KAAK;AACd;AAEA,eAAeN,uBAAuB","names":["useEffect","useState","useIntersectionObserver","elementRef","threshold","root","rootMargin","freezeOnceVisible","entry","setEntry","frozen","isIntersecting","updateEntry","node","current","hasIOSupport","window","IntersectionObserver","observerParams","observer","observe","disconnect","JSON","stringify"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useIntersectionObserver\\useIntersectionObserver.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from 'react'\n\ninterface Args extends IntersectionObserverInit {\n  freezeOnceVisible?: boolean\n}\n\nfunction useIntersectionObserver(\n  elementRef: RefObject<Element>,\n  {\n    threshold = 0,\n    root = null,\n    rootMargin = '0%',\n    freezeOnceVisible = false,\n  }: Args,\n): IntersectionObserverEntry | undefined {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>()\n\n  const frozen = entry?.isIntersecting && freezeOnceVisible\n\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\n    setEntry(entry)\n  }\n\n  useEffect(() => {\n    const node = elementRef?.current // DOM Ref\n    const hasIOSupport = !!window.IntersectionObserver\n\n    if (!hasIOSupport || frozen || !node) return\n\n    const observerParams = { threshold, root, rootMargin }\n    const observer = new IntersectionObserver(updateEntry, observerParams)\n\n    observer.observe(node)\n\n    return () => observer.disconnect()\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef, JSON.stringify(threshold), root, rootMargin, frozen])\n\n  return entry\n}\n\nexport default useIntersectionObserver\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}