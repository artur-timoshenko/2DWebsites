{"ast":null,"code":"import { useCallback, useState } from 'react';\nfunction useMap(initialState = new Map()) {\n  const [map, setMap] = useState(new Map(initialState));\n  const actions = {\n    set: useCallback((key, value) => {\n      setMap(prev => {\n        const copy = new Map(prev);\n        copy.set(key, value);\n        return copy;\n      });\n    }, []),\n    setAll: useCallback(entries => {\n      setMap(() => new Map(entries));\n    }, []),\n    remove: useCallback(key => {\n      setMap(prev => {\n        const copy = new Map(prev);\n        copy.delete(key);\n        return copy;\n      });\n    }, []),\n    reset: useCallback(() => {\n      setMap(() => new Map());\n    }, [])\n  };\n  return [map, actions];\n}\nexport default useMap;","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAe7C,SAASC,MAAMA,CACbC,eAAmC,IAAIC,GAAG,EAAE;EAE5C,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGL,QAAQ,CAAC,IAAIG,GAAG,CAACD,YAAY,CAAC,CAAC;EAErD,MAAMI,OAAO,GAAkB;IAC7BC,GAAG,EAAER,WAAW,CAAC,CAACS,GAAG,EAAEC,KAAK,KAAI;MAC9BJ,MAAM,CAACK,IAAI,IAAG;QACZ,MAAMC,IAAI,GAAG,IAAIR,GAAG,CAACO,IAAI,CAAC;QAC1BC,IAAI,CAACJ,GAAG,CAACC,GAAG,EAAEC,KAAK,CAAC;QACpB,OAAOE,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC;IAENC,MAAM,EAAEb,WAAW,CAACc,OAAO,IAAG;MAC5BR,MAAM,CAAC,MAAM,IAAIF,GAAG,CAACU,OAAO,CAAC,CAAC;IAChC,CAAC,EAAE,EAAE,CAAC;IAENC,MAAM,EAAEf,WAAW,CAACS,GAAG,IAAG;MACxBH,MAAM,CAACK,IAAI,IAAG;QACZ,MAAMC,IAAI,GAAG,IAAIR,GAAG,CAACO,IAAI,CAAC;QAC1BC,IAAI,CAACI,MAAM,CAACP,GAAG,CAAC;QAChB,OAAOG,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC;IAENK,KAAK,EAAEjB,WAAW,CAAC,MAAK;MACtBM,MAAM,CAAC,MAAM,IAAIF,GAAG,EAAE,CAAC;IACzB,CAAC,EAAE,EAAE;GACN;EAED,OAAO,CAACC,GAAG,EAAEE,OAAO,CAAC;AACvB;AAEA,eAAeL,MAAM","names":["useCallback","useState","useMap","initialState","Map","map","setMap","actions","set","key","value","prev","copy","setAll","entries","remove","delete","reset"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useMap\\useMap.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\n\nexport type MapOrEntries<K, V> = Map<K, V> | [K, V][]\n\n// Public interface\nexport interface Actions<K, V> {\n  set: (key: K, value: V) => void\n  setAll: (entries: MapOrEntries<K, V>) => void\n  remove: (key: K) => void\n  reset: Map<K, V>['clear']\n}\n\n// We hide some setters from the returned map to disable autocompletion\ntype Return<K, V> = [Omit<Map<K, V>, 'set' | 'clear' | 'delete'>, Actions<K, V>]\n\nfunction useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): Return<K, V> {\n  const [map, setMap] = useState(new Map(initialState))\n\n  const actions: Actions<K, V> = {\n    set: useCallback((key, value) => {\n      setMap(prev => {\n        const copy = new Map(prev)\n        copy.set(key, value)\n        return copy\n      })\n    }, []),\n\n    setAll: useCallback(entries => {\n      setMap(() => new Map(entries))\n    }, []),\n\n    remove: useCallback(key => {\n      setMap(prev => {\n        const copy = new Map(prev)\n        copy.delete(key)\n        return copy\n      })\n    }, []),\n\n    reset: useCallback(() => {\n      setMap(() => new Map())\n    }, []),\n  }\n\n  return [map, actions]\n}\n\nexport default useMap\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}