{"ast":null,"code":"import { useLocalStorage } from '../useLocalStorage';\nimport { useMediaQuery } from '../useMediaQuery';\nimport { useUpdateEffect } from '../useUpdateEffect';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useDarkMode(defaultValue) {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n  const [isDarkMode, setDarkMode] = useLocalStorage('usehooks-ts-dark-mode', defaultValue ?? isDarkOS ?? false);\n  useUpdateEffect(() => {\n    setDarkMode(isDarkOS);\n  }, [isDarkOS]);\n  return {\n    isDarkMode,\n    toggle: () => setDarkMode(prev => !prev),\n    enable: () => setDarkMode(true),\n    disable: () => setDarkMode(false)\n  };\n}\nexport default useDarkMode;","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,oBAAoB;AAEpD,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,eAAe,QAAQ,oBAAoB;AAEpD,MAAMC,kBAAkB,GAAG,8BAA8B;AASzD,SAASC,WAAWA,CAACC,YAAsB;EACzC,MAAMC,QAAQ,GAAGL,aAAa,CAACE,kBAAkB,CAAC;EAClD,MAAM,CAACI,UAAU,EAAEC,WAAW,CAAC,GAAGR,eAAe,CAC/C,uBAAuB,EACvBK,YAAY,IAAIC,QAAQ,IAAI,KAAK,CAClC;EAGDJ,eAAe,CAAC,MAAK;IACnBM,WAAW,CAACF,QAAQ,CAAC;EAEvB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,OAAO;IACLC,UAAU;IACVE,MAAM,EAAEA,MAAMD,WAAW,CAACE,IAAI,IAAI,CAACA,IAAI,CAAC;IACxCC,MAAM,EAAEA,MAAMH,WAAW,CAAC,IAAI,CAAC;IAC/BI,OAAO,EAAEA,MAAMJ,WAAW,CAAC,KAAK;GACjC;AACH;AAEA,eAAeJ,WAAW","names":["useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useDarkMode","defaultValue","isDarkOS","isDarkMode","setDarkMode","toggle","prev","enable","disable"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useDarkMode\\useDarkMode.ts"],"sourcesContent":["// See: https://usehooks-ts.com/react-hook/use-local-storage\nimport { useLocalStorage } from '../useLocalStorage'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useMediaQuery } from '../useMediaQuery'\n// See: https://usehooks-ts.com/react-hook/use-update-effect\nimport { useUpdateEffect } from '../useUpdateEffect'\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)'\n\ninterface UseDarkModeOutput {\n  isDarkMode: boolean\n  toggle: () => void\n  enable: () => void\n  disable: () => void\n}\n\nfunction useDarkMode(defaultValue?: boolean): UseDarkModeOutput {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY)\n  const [isDarkMode, setDarkMode] = useLocalStorage<boolean>(\n    'usehooks-ts-dark-mode',\n    defaultValue ?? isDarkOS ?? false,\n  )\n\n  // Update darkMode if os prefers changes\n  useUpdateEffect(() => {\n    setDarkMode(isDarkOS)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDarkOS])\n\n  return {\n    isDarkMode,\n    toggle: () => setDarkMode(prev => !prev),\n    enable: () => setDarkMode(true),\n    disable: () => setDarkMode(false),\n  }\n}\n\nexport default useDarkMode\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}