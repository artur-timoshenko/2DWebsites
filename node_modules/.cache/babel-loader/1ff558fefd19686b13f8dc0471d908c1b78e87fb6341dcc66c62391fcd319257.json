{"ast":null,"code":"import { useState } from 'react';\nfunction useCopyToClipboard() {\n  const [copiedText, setCopiedText] = useState(null);\n  const copy = async text => {\n    if (!navigator?.clipboard) {\n      console.warn('Clipboard not supported');\n      return false;\n    }\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText(text);\n      return true;\n    } catch (error) {\n      console.warn('Copy failed', error);\n      setCopiedText(null);\n      return false;\n    }\n  };\n  return [copiedText, copy];\n}\nexport default useCopyToClipboard;","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAKhC,SAASC,kBAAkBA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGH,QAAQ,CAAc,IAAI,CAAC;EAE/D,MAAMI,IAAI,GAAW,MAAMC,IAAI,IAAG;IAChC,IAAI,CAACC,SAAS,EAAEC,SAAS,EAAE;MACzBC,OAAO,CAACC,IAAI,CAAC,yBAAyB,CAAC;MACvC,OAAO,KAAK;;IAId,IAAI;MACF,MAAMH,SAAS,CAACC,SAAS,CAACG,SAAS,CAACL,IAAI,CAAC;MACzCF,aAAa,CAACE,IAAI,CAAC;MACnB,OAAO,IAAI;KACZ,CAAC,OAAOM,KAAK,EAAE;MACdH,OAAO,CAACC,IAAI,CAAC,aAAa,EAAEE,KAAK,CAAC;MAClCR,aAAa,CAAC,IAAI,CAAC;MACnB,OAAO,KAAK;;EAEhB,CAAC;EAED,OAAO,CAACD,UAAU,EAAEE,IAAI,CAAC;AAC3B;AAEA,eAAeH,kBAAkB","names":["useState","useCopyToClipboard","copiedText","setCopiedText","copy","text","navigator","clipboard","console","warn","writeText","error"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useCopyToClipboard\\useCopyToClipboard.ts"],"sourcesContent":["import { useState } from 'react'\n\ntype CopiedValue = string | null\ntype CopyFn = (text: string) => Promise<boolean> // Return success\n\nfunction useCopyToClipboard(): [CopiedValue, CopyFn] {\n  const [copiedText, setCopiedText] = useState<CopiedValue>(null)\n\n  const copy: CopyFn = async text => {\n    if (!navigator?.clipboard) {\n      console.warn('Clipboard not supported')\n      return false\n    }\n\n    // Try to save to clipboard then save it in the state if worked\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopiedText(text)\n      return true\n    } catch (error) {\n      console.warn('Copy failed', error)\n      setCopiedText(null)\n      return false\n    }\n  }\n\n  return [copiedText, copy]\n}\n\nexport default useCopyToClipboard\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}