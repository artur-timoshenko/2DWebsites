{"ast":null,"code":"import { useEventListener } from '../useEventListener';\nfunction useOnClickOutside(ref, handler, mouseEvent = 'mousedown') {\n  useEventListener(mouseEvent, event => {\n    const el = ref?.current;\n    if (!el || el.contains(event.target)) {\n      return;\n    }\n    handler(event);\n  });\n}\nexport default useOnClickOutside;","map":{"version":3,"mappings":"AAEA,SAASA,gBAAgB,QAAQ,qBAAqB;AAItD,SAASC,iBAAiBA,CACxBC,GAAiB,EACjBC,OAAgB,EAChBC,aAAsC,WAAW;EAEjDJ,gBAAgB,CAACI,UAAU,EAAEC,KAAK,IAAG;IACnC,MAAMC,EAAE,GAAGJ,GAAG,EAAEK,OAAO;IAGvB,IAAI,CAACD,EAAE,IAAIA,EAAE,CAACE,QAAQ,CAACH,KAAK,CAACI,MAAc,CAAC,EAAE;MAC5C;;IAGFN,OAAO,CAACE,KAAK,CAAC;EAChB,CAAC,CAAC;AACJ;AAEA,eAAeJ,iBAAiB","names":["useEventListener","useOnClickOutside","ref","handler","mouseEvent","event","el","current","contains","target"],"sources":["C:\\Users\\Artur\\Desktop\\portfolio-inner-site-master\\node_modules\\usehooks-ts\\src\\useOnClickOutside\\useOnClickOutside.ts"],"sourcesContent":["import { RefObject } from 'react'\n\nimport { useEventListener } from '../useEventListener'\n\ntype Handler = (event: MouseEvent) => void\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: RefObject<T>,\n  handler: Handler,\n  mouseEvent: 'mousedown' | 'mouseup' = 'mousedown',\n): void {\n  useEventListener(mouseEvent, event => {\n    const el = ref?.current\n\n    // Do nothing if clicking ref's element or descendent elements\n    if (!el || el.contains(event.target as Node)) {\n      return\n    }\n\n    handler(event)\n  })\n}\n\nexport default useOnClickOutside\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}